diff -urN linux-2.4.18-4-capfix/Documentation/Configure.help linux-2.4.18-4/Documentation/Configure.help
--- linux-2.4.18-4-capfix/Documentation/Configure.help	Tue May 28 11:42:35 2002
+++ linux-2.4.18-4/Documentation/Configure.help	Thu May  2 14:36:41 2002
@@ -3775,22 +3775,6 @@
   building a kernel for install/rescue disks or your system is very
   limited in memory.
 
-Inherit Capabilities Across Exec
-CONFIG_INHERIT_CAPS_ACROSS_EXEC
-  Allow non-root users to pass on capabilities when they exec
-  binaries.  When this feature is used in combination with a
-  user-level capability assignment mechanism (e.g. pam_capability)
-  it can significantly reduce the amount of time that users need
-  to run as root.
-
-  Note that this is a temporary solution to the larger
-  problem of implementing full support for capabilities in
-  the Linux virtual file system layer.
-
-  You should say N here unless you know what this is and know
-  that you want to use it.
-
-
 # Choice: kcore
 Kernel core (/proc/kcore) format
 CONFIG_KCORE_ELF
diff -urN linux-2.4.18-4-capfix/Makefile linux-2.4.18-4/Makefile
--- linux-2.4.18-4-capfix/Makefile	Tue May 28 11:42:49 2002
+++ linux-2.4.18-4/Makefile	Thu May  2 15:19:06 2002
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 4
 SUBLEVEL = 18
-EXTRAVERSION = -capfix
+EXTRAVERSION = 
 
 KERNELRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 
diff -urN linux-2.4.18-4-capfix/arch/i386/config.in linux-2.4.18-4/arch/i386/config.in
--- linux-2.4.18-4-capfix/arch/i386/config.in	Tue May 28 11:42:35 2002
+++ linux-2.4.18-4/arch/i386/config.in	Thu May  2 14:36:43 2002
@@ -271,9 +271,6 @@
 bool 'System V IPC' CONFIG_SYSVIPC
 bool 'BSD Process Accounting' CONFIG_BSD_PROCESS_ACCT
 bool 'Sysctl support' CONFIG_SYSCTL
-if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
-   bool 'Inherit Capabilities Across Exec' CONFIG_INHERIT_CAPS_ACROSS_EXEC
-fi
 if [ "$CONFIG_PROC_FS" = "y" ]; then
    choice 'Kernel core (/proc/kcore) format' \
 	"ELF		CONFIG_KCORE_ELF	\
diff -urN linux-2.4.18-4-capfix/fs/exec.c linux-2.4.18-4/fs/exec.c
--- linux-2.4.18-4-capfix/fs/exec.c	Tue May 28 11:42:35 2002
+++ linux-2.4.18-4/fs/exec.c	Thu May  2 14:36:34 2002
@@ -652,29 +652,6 @@
 	cap_clear(bprm->cap_permitted);
 	cap_clear(bprm->cap_effective);
 
-#ifdef	CONFIG_INHERIT_CAPS_ACROSS_EXEC
-	/* allow non-root users to pass on capabilities
-	 * when they exec binaries. we leave all capabilities
-	 * cleared if cap_setpcap is set in any of the capability
-	 * sets as a marker to indicate that an application did not
-	 * call sys_capset via * cap_set_proc.
-	 *
-	 * NB: this means that non-root users can never be granted
-	 * cap_setpcap. This isn't necessarily * a bad thing.
-	 *
-	 * NB: we use cap_inheritable here so that login can set
-	 * setuid/setgid in eff & perm for purposes of su, which
-	 * can then go away silently.
-	 */
-	if ( (current->euid != 0 || issecure(SECURE_NOROOT))      &&
-	     !(cap_raised(current->cap_inheritable,CAP_SETPCAP))  &&
-	     !(cap_raised(current->cap_effective,CAP_SETPCAP))    &&
-	     !(cap_raised(current->cap_permitted,CAP_SETPCAP)) ) {
-		bprm->cap_permitted   = current->cap_inheritable;
-		bprm->cap_effective   = current->cap_inheritable;
-	}
-#endif
-
 	/*  To support inheritance of root-permissions and suid-root
          *  executables under compatibility mode, we raise all three
          *  capability sets for the file.
diff -urN linux-2.4.18-4-capfix/fs/open.c linux-2.4.18-4/fs/open.c
--- linux-2.4.18-4-capfix/fs/open.c	Mon Jul  1 09:21:34 2002
+++ linux-2.4.18-4/fs/open.c	Fri Oct 12 13:48:42 2001
@@ -333,14 +333,7 @@
 	current->fsuid = current->uid;
 	current->fsgid = current->gid;
 
-	/*
-	 * Clear the capabilities if we switch to a non-root user
-	 *
-	 * FIXME: There is a race here against sys_capset.  The
-	 * capabilities can change yet we will restore the old
-	 * value below.  We should hold task_capabilities_lock,
-	 * but we cannot because user_path_walk can sleep.
-	 */
+	/* Clear the capabilities if we switch to a non-root user */
 	if (current->uid)
 		cap_clear(current->cap_effective);
 	else
diff -urN linux-2.4.18-4-capfix/include/linux/capability.h linux-2.4.18-4/include/linux/capability.h
--- linux-2.4.18-4-capfix/include/linux/capability.h	Mon Jul  1 09:21:34 2002
+++ linux-2.4.18-4/include/linux/capability.h	Thu May  2 15:10:28 2002
@@ -42,10 +42,6 @@
   
 #ifdef __KERNEL__
 
-#include <linux/spinlock.h>
-
-extern spinlock_t task_capability_lock;
-
 /* #define STRICT_CAP_T_TYPECHECKS */
 
 #ifdef STRICT_CAP_T_TYPECHECKS
diff -urN linux-2.4.18-4-capfix/kernel/capability.c linux-2.4.18-4/kernel/capability.c
--- linux-2.4.18-4-capfix/kernel/capability.c	Mon Jul  1 09:21:34 2002
+++ linux-2.4.18-4/kernel/capability.c	Thu May  2 14:36:31 2002
@@ -2,21 +2,17 @@
  * linux/kernel/capability.c
  *
  * Copyright (C) 1997  Andrew Main <zefram@fysh.org>
- *
  * Integrated into 2.1.97+,  Andrew G. Morgan <morgan@transmeta.com>
- * 30 May 2002:	Cleanup, Robert M. Love <rml@tech9.net>
  */ 
 
 #include <linux/mm.h>
 #include <asm/uaccess.h>
 
 unsigned securebits = SECUREBITS_DEFAULT; /* systemwide security settings */
+
 kernel_cap_t cap_bset = CAP_INIT_EFF_SET;
 
-/*
- * This global lock protects task->cap_* for all tasks including current.
- * Locking rule: acquire this prior to tasklist_lock.
- */
+/* Note: never hold tasklist_lock while spinning for this one */
 spinlock_t task_capability_lock = SPIN_LOCK_UNLOCKED;
 
 /*
@@ -25,24 +21,23 @@
  * uninteresting and/or not to be changed.
  */
 
-/*
- * sys_capget - get the capabilities of a given process.
- */
 asmlinkage long sys_capget(cap_user_header_t header, cap_user_data_t dataptr)
 {
-     int ret = 0;
-     pid_t pid;
+     int error, pid;
      __u32 version;
-     task_t *target;
+     struct task_struct *target;
      struct __user_cap_data_struct data;
 
      if (get_user(version, &header->version))
 	     return -EFAULT;
-
-     if (version != _LINUX_CAPABILITY_VERSION)
-	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))
-		     return -EFAULT; 
-             return -EINVAL;
+	     
+     error = -EINVAL; 
+     if (version != _LINUX_CAPABILITY_VERSION) {
+             version = _LINUX_CAPABILITY_VERSION;
+	     if (put_user(version, &header->version))
+		     error = -EFAULT; 
+             return error;
+     }
 
      if (get_user(pid, &header->pid))
 	     return -EFAULT; 
@@ -50,39 +45,48 @@
      if (pid < 0) 
              return -EINVAL;
 
+     error = 0;
+
      spin_lock(&task_capability_lock);
-     read_lock(&tasklist_lock); 
 
-     target = find_task_by_pid(pid);
-     if (!target) {
-          ret = -ESRCH;
-          goto out;
+     if (pid && pid != current->pid) {
+	     read_lock(&tasklist_lock); 
+             target = find_task_by_pid(pid);  /* identify target of query */
+             if (!target) 
+                     error = -ESRCH;
+     } else {
+             target = current;
      }
 
-     data.permitted = cap_t(target->cap_permitted);
-     data.inheritable = cap_t(target->cap_inheritable); 
-     data.effective = cap_t(target->cap_effective);
+     if (!error) { 
+	     data.permitted = cap_t(target->cap_permitted);
+	     data.inheritable = cap_t(target->cap_inheritable); 
+	     data.effective = cap_t(target->cap_effective);
+     }
 
-out:
-     read_unlock(&tasklist_lock); 
+     if (target != current)
+	     read_unlock(&tasklist_lock); 
      spin_unlock(&task_capability_lock);
 
-     if (!ret && copy_to_user(dataptr, &data, sizeof data))
-          return -EFAULT; 
+     if (!error) {
+	     if (copy_to_user(dataptr, &data, sizeof data))
+		     return -EFAULT; 
+     }
 
-     return ret;
+     return error;
 }
 
-/*
- * cap_set_pg - set capabilities for all processes in a given process
- * group.  We call this holding task_capability_lock and tasklist_lock.
- */
-static inline void cap_set_pg(int pgrp, kernel_cap_t *effective,
-			      kernel_cap_t *inheritable,
-			      kernel_cap_t *permitted)
+/* set capabilities for all processes in a given process group */
+
+static void cap_set_pg(int pgrp,
+                    kernel_cap_t *effective,
+                    kernel_cap_t *inheritable,
+                    kernel_cap_t *permitted)
 {
-     task_t *target;
+     struct task_struct *target;
 
+     /* FIXME: do we need to have a write lock here..? */
+     read_lock(&tasklist_lock);
      for_each_task(target) {
              if (target->pgrp != pgrp)
                      continue;
@@ -90,18 +94,20 @@
              target->cap_inheritable = *inheritable;
              target->cap_permitted   = *permitted;
      }
+     read_unlock(&tasklist_lock);
 }
 
-/*
- * cap_set_all - set capabilities for all processes other than init
- * and self.  We call this holding task_capability_lock and tasklist_lock.
- */
-static inline void cap_set_all(kernel_cap_t *effective,
-			       kernel_cap_t *inheritable,
-			       kernel_cap_t *permitted)
+/* set capabilities for all processes other than 1 and self */
+
+static void cap_set_all(kernel_cap_t *effective,
+                     kernel_cap_t *inheritable,
+                     kernel_cap_t *permitted)
 {
-     task_t *target;
+     struct task_struct *target;
 
+     /* FIXME: do we need to have a write lock here..? */
+     read_lock(&tasklist_lock);
+     /* ALL means everyone other than self or 'init' */
      for_each_task(target) {
              if (target == current || target->pid == 1)
                      continue;
@@ -109,35 +115,35 @@
              target->cap_inheritable = *inheritable;
              target->cap_permitted   = *permitted;
      }
+     read_unlock(&tasklist_lock);
 }
 
 /*
- * sys_capset - set capabilities for a given process, all processes, or all
- * processes in a given process group.
- *
  * The restrictions on setting capabilities are specified as:
  *
  * [pid is for the 'target' task.  'current' is the calling task.]
  *
- * I: any raised capabilities must be a subset of the (old current) permitted
+ * I: any raised capabilities must be a subset of the (old current) Permitted
  * P: any raised capabilities must be a subset of the (old current) permitted
- * E: must be set to a subset of (new target) permitted
+ * E: must be set to a subset of (new target) Permitted
  */
+
 asmlinkage long sys_capset(cap_user_header_t header, const cap_user_data_t data)
 {
      kernel_cap_t inheritable, permitted, effective;
      __u32 version;
-     task_t *target;
-     int ret;
-     pid_t pid;
+     struct task_struct *target;
+     int error, pid;
 
      if (get_user(version, &header->version))
 	     return -EFAULT; 
 
-     if (version != _LINUX_CAPABILITY_VERSION)
-	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))
+     if (version != _LINUX_CAPABILITY_VERSION) {
+             version = _LINUX_CAPABILITY_VERSION;
+	     if (put_user(version, &header->version))
 		     return -EFAULT; 
              return -EINVAL;
+     }
 
      if (get_user(pid, &header->pid))
 	     return -EFAULT; 
@@ -150,35 +156,43 @@
 	 copy_from_user(&permitted, &data->permitted, sizeof(permitted)))
 	     return -EFAULT; 
 
+     error = -EPERM;
      spin_lock(&task_capability_lock);
-     read_lock(&tasklist_lock);
 
      if (pid > 0 && pid != current->pid) {
-          target = find_task_by_pid(pid);
-          if (!target) {
-               ret = -ESRCH;
-               goto out;
-          }
-     } else
-               target = current;
+             read_lock(&tasklist_lock);
+             target = find_task_by_pid(pid);  /* identify target of query */
+             if (!target) {
+                     error = -ESRCH;
+		     goto out;
+	     }
+     } else {
+             target = current;
+     }
 
-     ret = -EPERM;
 
      /* verify restrictions on target's new Inheritable set */
-     if (!cap_issubset(inheritable, cap_combine(target->cap_inheritable,
-                       current->cap_permitted)))
+     if (!cap_issubset(inheritable,
+                       cap_combine(target->cap_inheritable,
+                                   current->cap_permitted))) {
              goto out;
+     }
 
      /* verify restrictions on target's new Permitted set */
-     if (!cap_issubset(permitted, cap_combine(target->cap_permitted,
-                       current->cap_permitted)))
+     if (!cap_issubset(permitted,
+                       cap_combine(target->cap_permitted,
+                                   current->cap_permitted))) {
              goto out;
+     }
 
      /* verify the _new_Effective_ is a subset of the _new_Permitted_ */
-     if (!cap_issubset(effective, permitted))
+     if (!cap_issubset(effective, permitted)) {
              goto out;
+     }
 
-     ret = 0;
+     /* having verified that the proposed changes are legal,
+           we now put them into effect. */
+     error = 0;
 
      if (pid < 0) {
              if (pid == -1)  /* all procs other than current and init */
@@ -186,15 +200,19 @@
 
              else            /* all procs in process group */
                      cap_set_pg(-pid, &effective, &inheritable, &permitted);
+             goto spin_out;
      } else {
+             /* FIXME: do we need to have a write lock here..? */
              target->cap_effective   = effective;
              target->cap_inheritable = inheritable;
              target->cap_permitted   = permitted;
      }
 
 out:
-     read_unlock(&tasklist_lock);
+     if (target != current) {
+             read_unlock(&tasklist_lock);
+     }
+spin_out:
      spin_unlock(&task_capability_lock);
-
-     return ret;
+     return error;
 }
